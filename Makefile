# Clang's default system includes, generated by `clang -v -E - </dev/null 2>&1`
# /usr/lib/llvm-14/lib/clang/14.0.6/include
# /usr/local/include
# /usr/include/x86_64-linux-gnu
# /usr/include

# Builds the BPF object(s) from BPF source code.
minimal.bpf.o.tmp: minimal.bpf.c
	clang \
		-target bpf \
		-g3 -Wall -Wextra \
		-I /usr/include/x86_64-linux-gnu \
		-c \
		-o minimal.bpf.o.tmp \
		minimal.bpf.c

# Links a single BPF object from multiple BPF objects.
# Deduplicates BTF data.
minimal.bpf.o: minimal.bpf.o.tmp
	bpftool gen object \
		minimal.bpf.o \
		minimal.bpf.o.tmp \

# Generates a BPF skeleton header for a given BPF object.
minimal.skel.h: minimal.bpf.o
	bpftool gen skeleton \
		minimal.bpf.o \
		> minimal.skel.h

# Builds the application object(s).
minimal.o: minimal.skel.h minimal.c
	clang \
		-g3 -Wall -Wextra \
		-c \
		-o minimal.o \
		minimal.c

# Links a single application executable from multiple object files.
# - the zlib library
# - the libelf library
# - the application object
# - the libbpf library
minimal: minimal.o
	clang \
		-lelf -lz \
		-o minimal \
		minimal.o ../libbpf/src/libbpf.a

# Deletes all generated files.
.PHONY: clean
clean:
	rm -f minimal.bpf.o.tmp minimal.bpf.o minimal.skel.h minimal.o minimal
